import logging
import os
import re
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
CRM_API_KEY = os.getenv("CRM_API_KEY")
CRM_USER_ID = os.getenv("CRM_USER_ID")
TELEGRAM_CHANNEL = os.getenv("TELEGRAM_CHANNEL")
PRIVACY_URL = os.getenv("PRIVACY_URL")

CRM_URL = f"https://u-on.ru/{CRM_USER_ID}/api/lead/create.json?key={CRM_API_KEY}"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


# --- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
class Form(StatesGroup):
    name = State()
    phone = State()
    consent = State()


# --- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ---
def sanitize_phone(text: str) -> str:
    """–ü—Ä–∏–≤–µ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∫ —Ñ–æ—Ä–º–∞—Ç—É +7XXXXXXXXXX"""
    if not text:
        return ""
    digits = re.sub(r"\D", "", text)

    # –ï—Å–ª–∏ –≤–≤–µ–ª–∏ 11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å 8 ‚Üí –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
    if len(digits) == 11 and digits.startswith("8"):
        digits = "7" + digits[1:]

    # –ï—Å–ª–∏ –≤–≤–µ–ª–∏ 10 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 9 ‚Üí –¥–æ–±–∞–≤–ª—è–µ–º 7
    if len(digits) == 10 and digits.startswith("9"):
        digits = "7" + digits

    # –î–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å—Å—è —Å—Ç—Ä–æ–≥–æ 11 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 7
    if len(digits) == 11 and digits.startswith("7"):
        return f"+{digits}"

    return ""  # —Å–∏–≥–Ω–∞–ª, —á—Ç–æ –Ω–æ–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π


# --- –°—Ç–∞—Ä—Ç ---
@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –∏–º—è:")
    await Form.name.set()


# --- –ò–º—è ---
@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(types.KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True))

    await message.answer("–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=keyboard)
    await Form.phone.set()


# --- –¢–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç" ---
@dp.message_handler(content_types=types.ContentType.CONTACT, state=Form.phone)
async def process_phone_contact(message: types.Message, state: FSMContext):
    phone = sanitize_phone(message.contact.phone_number)
    if not phone:
        await message.answer("–ù–æ–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    await state.update_data(phone=phone)
    await ask_consent(message, state)


# --- –¢–µ–ª–µ—Ñ–æ–Ω –≤—Ä—É—á–Ω—É—é ---
@dp.message_handler(state=Form.phone, content_types=types.ContentTypes.TEXT)
async def process_phone_text(message: types.Message, state: FSMContext):
    phone = sanitize_phone(message.text)
    if not phone:
        await message.answer("–ù–æ–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π. –£–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–∞.")
        return
    await state.update_data(phone=phone)
    await ask_consent(message, state)


# --- –ó–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–∏—è ---
async def ask_consent(message: types.Message, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(
        text="üìñ –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏",
        url=PRIVACY_URL
    ))
    keyboard.add(types.InlineKeyboardButton(
        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å",
        callback_data="submit"
    ))

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É:", reply_markup=keyboard)
    await Form.consent.set()


# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ---
@dp.callback_query_handler(lambda c: c.data == 'submit', state=Form.consent)
async def process_submit(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    name = data['name']
    phone = data['phone']
    tg_id = callback_query.from_user.id
    username = callback_query.from_user.username or "‚Äî"

    # 1. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ CRM
    crm_payload = {
        'name': name,
        'phone': phone,
        'comment': f"Telegram ID: {tg_id}, username: @{username}"
    }
    crm_response = requests.post(CRM_URL, data=crm_payload)

    # 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –≤ @turzapros
    msg = f"üîî –ù–æ–≤—ã–π –ª–∏–¥\nüë§ –ò–º—è: {name}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nüÜî Telegram ID: {tg_id}\nüí¨ Username: @{username}"
    await bot.send_message(TELEGRAM_CHANNEL, msg)

    # 3. –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if crm_response.status_code == 200:
        await bot.send_message(callback_query.from_user.id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ")
    else:
        await bot.send_message(callback_query.from_user.id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ CRM. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
