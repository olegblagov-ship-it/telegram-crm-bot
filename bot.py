# bot.py
import logging
import os
import re
import requests

from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from dotenv import load_dotenv

load_dotenv()

# --- ENV ---
API_TOKEN = os.getenv("BOT_TOKEN") or os.getenv("API_TOKEN")  # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö –∏–º—ë–Ω
UON_API_KEY = os.getenv("CRM_API_KEY") or os.getenv("UON_API_KEY")
TELEGRAM_CHANNEL = os.getenv("TELEGRAM_CHANNEL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä, @turzapros
PRIVACY_URL = os.getenv("PRIVACY_URL", "https://example.com/privacy")
CRM_SOURCE = os.getenv("CRM_SOURCE", "–ó–∞—è–≤–∫–∞ –∏–∑ Telegram")

# –ü—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
missing = []
if not API_TOKEN:
    missing.append("BOT_TOKEN (–∏–ª–∏ API_TOKEN)")
if not UON_API_KEY:
    missing.append("CRM_API_KEY (–∏–ª–∏ UON_API_KEY)")
if not TELEGRAM_CHANNEL:
    missing.append("TELEGRAM_CHANNEL (@turzapros)")
if missing:
    raise RuntimeError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: " + ", ".join(missing))

# --- CRM endpoint (U-ON) ---
CRM_ENDPOINT = f"https://api.u-on.ru/{UON_API_KEY}/lead/create.json"  # —Å–º. –æ—Ñ. –¥–æ–∫–∏

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


class Form(StatesGroup):
    name = State()
    phone = State()
    consent = State()


def sanitize_phone(text: str) -> str:
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ + –∏ —Ü–∏—Ñ—Ä—ã, —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã/—Å–∫–æ–±–∫–∏/–¥–µ—Ñ–∏—Å—ã
    if not text:
        return ""
    p = re.sub(r"[^\d+]", "", text)
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–¥—É—â–∏—Ö –Ω—É–ª–µ–π/8 –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ ‚Äî —Ç—É—Ç –ø–æ –º–∏–Ω–∏–º—É–º—É
    return p


@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    kb = types.ReplyKeyboardRemove()
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –∏–º—è:", reply_markup=kb)
    await Form.name.set()


@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–¥–∞—Å—Ç phone –±–µ–∑ –æ–ø–µ—á–∞—Ç–æ–∫)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=kb)
    await Form.phone.set()


# –ü—Ä–∏—à—ë–ª –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
@dp.message_handler(content_types=types.ContentType.CONTACT, state=Form.phone)
async def process_phone_contact(message: types.Message, state: FSMContext):
    phone = sanitize_phone(message.contact.phone_number)
    await state.update_data(phone=phone)
    await ask_consent(message, state)


# –ü—Ä–∏—à—ë–ª —Ç–µ–∫—Å—Ç–æ–º
@dp.message_handler(state=Form.phone, content_types=types.ContentTypes.TEXT)
async def process_phone_text(message: types.Message, state: FSMContext):
    phone = sanitize_phone(message.text)
    if len(re.sub(r"\D", "", phone)) < 6:
        await message.answer("–ü–æ—Ö–æ–∂–µ, –Ω–æ–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–∏–∂–µ.")
        return
    await state.update_data(phone=phone)
    await ask_consent(message, state)


async def ask_consent(message: types.Message, state: FSMContext):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", url=PRIVACY_URL))
    kb.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="submit"))
    await message.answer(
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏:",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    data = await state.get_data()
    await message.answer(f"–ò–º—è: {data.get('name')}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}", reply_markup=kb)
    await Form.consent.set()


@dp.callback_query_handler(lambda c: c.data == "submit", state=Form.consent)
async def process_submit(callback_query: types.CallbackQuery, state: FSMContext):
    user = callback_query.from_user
    data = await state.get_data()
    name = (data.get("name") or user.full_name or "").strip()
    phone = sanitize_phone(data.get("phone") or "")

    # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ U-ON CRM ---
    note = f"tg_id: {user.id}; username: @{user.username or '-'}"
    payload = {
        "source": CRM_SOURCE,
        "u_name": name,
        "u_phone": phone,
        "note": note,
    }

    crm_ok = False
    crm_err = None
    try:
        resp = requests.post(CRM_ENDPOINT, data=payload, timeout=10)
        if resp.status_code == 200:
            # –í–æ –º–Ω–æ–≥–∏—Ö —Å–ª—É—á–∞—è—Ö U-ON –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –ª–∏–¥–∞.
            # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –Ω–µ –∂—ë—Å—Ç–∫–æ –ø–∞—Ä—Å–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É:
            try:
                j = resp.json()
                # –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å —è–≤–Ω–∞—è –æ—à–∏–±–∫–∞ ‚Äî –æ—Ç–ª–æ–≤–∏–º
                if isinstance(j, dict) and j.get("error"):
                    crm_err = str(j.get("error"))
                else:
                    crm_ok = True
            except ValueError:
                # –ù–µ JSON? –°—á–∏—Ç–∞–µ–º –ø–æ –∫–æ–¥—É –æ—Ç–≤–µ—Ç–∞
                crm_ok = True
        else:
            crm_err = f"HTTP {resp.status_code}"
    except Exception as e:
        crm_err = str(e)

    # --- –î—É–±–ª—å –≤ @turzapros ---
    # –í –∫–∞–Ω–∞–ª –ø–µ—Ä–µ–¥–∞—ë–º –∫—Ä–∞—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å tg_id –∏ username.
    channel_msg = (
        "üîî –ù–æ–≤—ã–π –ª–∏–¥\n"
        f"üë§ –ò–º—è: {name}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üÜî tg_id: {user.id}\n"
        f"üìù username: @{user.username or '-'}"
    )
    try:
        await bot.send_message(TELEGRAM_CHANNEL, channel_msg)
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—É–±–ª—å –≤ –∫–∞–Ω–∞–ª: %s", e)

    # --- –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
    if crm_ok:
        await bot.send_message(user.id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ")
    else:
        logging.error("CRM –æ—à–∏–±–∫–∞: %s", crm_err)
        await bot.send_message(
            user.id,
            "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ CRM. –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ. üôè",
        )

    await state.finish()
    await callback_query.answer()  # —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏


if __name__ == "__main__":
    # skip_updates=True ‚Äî —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –∞–ø–¥–µ–π—Ç—ã –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ
    executor.start_polling(dp, skip_updates=True)
